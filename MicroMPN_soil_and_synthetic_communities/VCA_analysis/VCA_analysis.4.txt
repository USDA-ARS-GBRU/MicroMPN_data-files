library(VCA)
library(STB)

#####Variance component analysis

#following tutorial
#https://cran.r-project.org/web/packages/VCA/vignettes/VCA_package_vignette.html
#Explanation of VCA (taken from above link)
#VCA are a way to assess how the variability of a dependent variable is structured 
#taking into account its association with one or multiple random-effects variables.
#Proportions fo the total variability found to be attributed to these random
#effects variables are called variance components. 
#Thus, VCA is the procedure of estimating the amount of VCs' contribution to the total
#variability in the dependent variable.
#VCs can be predicted in random models(random effects or variance component models) and 
#LMMs (linear mixed-effect models) by application of either analysis of variance(ANOVE)-type estimation
#or Restricted Maximum Likelihood (REML)

#the larger the precision of a measuring method the smalles is its imprecision

########MPN values calculated using the --trim_positives and rarity index greater than 1e-4, cutoff = 6

####Users can run the analysis with MPN adjusted values by simply subsetting for the correct columns in the input file.

#MPN values removed from the analysis due to rarity index 
#C2	B3	5.364554462	5.326943883	7.530189719	FLUORESCENCE ISSUE	
#C2	B4	7.222978909	7.175900842	7.600886023	rarity index	
#C4	A3	9.141189874	9.077567525	7.943033497	rarity index	


#############################Importing datasetc2,c3,c4,c5,control


data <- fread("data_micrompn_trim_norarity_community_R.csv")

data <- data[,-4]#removes column "MPN adjusted"

#adding a column method
data$method = rep(c(rep("fluorMPN",16),rep("spotting", 17)))

#make method, sample, day as factors
data$Sample = factor(data$Sample, levels=c("C2", "C3", "C4", "C5","rfp-Rs5"))


#separate the data to run the analysis per method(focus on the varaibility of sample for each method)
datampn = data[,-c(2,4)]
datacfu = data[,-c(2,3)]


#ultimately, to run VCA analysis we need a dataframe
df_datampn= data.frame(datampn)
df_datacfu= data.frame(datacfu)

#variability chart of data 
#determines the sequence of variables in the model formula and uses this information to construct the variability chart.
vplotmpn = varPlot(form=MPN~Sample, Data=df_datampn)
vplotcfu = varPlot(form=CFU~Sample, Data=df_datacfu)


#fitting the model
#This function equates observed ANOVA Type-I sums of squares(SS) to their expected values and solves the resulting system of linear equations for variance components.

fitmpn1 = anovaVCA(form=MPN~Sample, NegVC=TRUE, Data=df_datampn)
print(fitmpn1)

fitcfu = anovaVCA(form=CFU~Sample, NegVC=TRUE, Data=df_datacfu)
print(fitcfu)


#determing extreme outliers in the dataset
#Residuals that deviate further than 3 times the standard deviation can be considered as extreme, since the expected value of the mean after studentization is equal to 1. Thus, only 0.3% of all observations are expected to be outside of the +/−3×SD
#interval

#MPN
#conditional residuals
plotRandVarmpn = plotRandVar(fitmpn1, term="cond", mode="student", Xlabels =list(offset=0.25, cex=0.65),  ylim=c(-4,4)) 
abline(h=c(-3, 3), lty=2, col="red", lwd=2)
mtext(side=4, at=c(-3, 3), col="red", line=.25, las=1, text=c(-3, 3))
dev.off()

#CFU
plotRandVarcfu = plotRandVar(fitcfu, term="cond", mode="student", ylim=c(-4,4)) 
abline(h=c(-3, 3), lty=2, col="red", lwd=2)
mtext(side=4, at=c(-3, 3), col="red", line=.25, las=1, text=c(-3, 3))

#result:no outliers

####checking form normality with simultaneous tolerance bounds (package STB)
#STB is useful for chacking whether a numeric vector fits to a hypothetical null-distribution or not

set.seed(45)
STB.res.mpn <- stb(fitmpn1, term="cond", mode="student", N=5000)

set.seed(45)
STB.res.cfu <- stb(fitcfu, term="cond", mode="student", N=5000)

#result:Data normally distributed

####estimate 95% confidence intervals
inf.mpn = VCAinference(fitmpn1, VarVC=TRUE)
print(inf.mpn)

inf.cfu = VCAinference(fitcfu, VarVC=TRUE)
print(inf.cfu)


####################################################################
#saving plots to a pdf file 

pdf("vca_plots_normality_outliers.pdf", width=8, height=10)

#first page setup
par(mfrow = c(2,1), mar = c(1, 1, 5, 0.5), oma = c(3, 4, 2, 5) )

#normality mpn
set.seed(45)
STB.res.mpn <- stb(fitmpn1, term="cond", mode="student", N=5000)

title(main = "Normality and outlier analysis for method fluorMPN", line = 4, font= 3, col.main="blue")

#outlier mpn
plotRandVarmpn = plotRandVar(fitmpn1, term="cond", mode="student", Xlabels=list(adj=0.5, offset=0, srt=90), ylim=c(-4,4)) 
abline(h=c(-3, 3), lty=2, col="red", lwd=2)
mtext(side=4, at=c(-3, 3), col="red", line=.25, las=1, text=c(-3, 3))

#next page setup
par(mfrow = c(2,1), mar = c(1, 1, 5, 0.5), oma = c(3, 4, 2, 5) )

#normality CFU
set.seed(45)
STB.res.cfu <- stb(fitcfu, term="cond", mode="student", N=5000)

title(main = "Normality and outlier analysis for method spotting", line = 4, font= 3, col.main="blue")

#outlier CFU
plotRandVarcfu = plotRandVar(fitcfu, term="cond", mode="student", Xlabels=list(adj=0.5, offset=0, srt=90), ylim=c(-4,4)) 
abline(h=c(-3, 3), lty=2, col="red", lwd=2)
mtext(side=4, at=c(-3, 3), col="red", line=.25, las=1, text=c(-3, 3))

dev.off()



####################################################################
#printing stats to console

print(fitmpn1, digits=4L, what="all")
print(fitcfu, digits=4L, what="all")
print(inf.mpn, digits=4L, what="all")
print(inf.cfu, digits=4L, what="all")

####################################################################
#graphical summary of results

#example of how to use oma with par()
#par(mfrow = c(2,1), oma = c(2, 5, 0, 5))


# Negative Variance Component Estimates
# The variance components estimated by PROC VARCOMP should theoretically be nonnegative because they are assumed to represent the variance of a random variable. Nevertheless, when you are using METHOD=MIVQUE0, TYPE1, or GRR, some estimates of variance components might become negative. (Due to the nature of the algorithms used for METHOD=ML and METHOD=REML, negative estimates are constrained to zero.) These negative estimates might arise for a variety of reasons:
#   
#   The variability in your data might be large enough to produce a negative estimate, even though the true value of the variance component is positive.
# 
# Your data might contain outliers. Refer to Hocking (1983) for a graphical technique for detecting outliers in variance components models by using the SAS System.
# 
# A different model for interpreting your data might be appropriate. Under some statistical models for variance components analysis, negative estimates are an indication that observations in your data are negatively correlated. Refer to Hocking (1984) for further information about these models.
# 
# Assuming you are satisfied that the model that PROC VARCOMP is using is appropriate for your data, it is common practice to treat negative variance components as if they are zero.
# 
